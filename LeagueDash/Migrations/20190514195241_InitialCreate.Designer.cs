// <auto-generated />
using System;
using LeagueDash.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace LeagueDash.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20190514195241_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.2-servicing-10034")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("LeagueDash.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("FirstName")
                        .IsRequired();

                    b.Property<string>("LastName")
                        .IsRequired();

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<int>("PositionId");

                    b.Property<int>("RoleId");

                    b.Property<string>("SecurityStamp");

                    b.Property<int?>("TeamId");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = "ce96ae73-4dc3-4bed-bd0b-de0668220618",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "bbcc79d4-ad38-4a49-9dce-daca9c88139d",
                            Email = "rodger@rodger.com",
                            EmailConfirmed = true,
                            FirstName = "Rodger",
                            LastName = "Commish",
                            LockoutEnabled = false,
                            NormalizedEmail = "RODGER@RODGER.COM",
                            NormalizedUserName = "RODGER@RODGER.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEIQTrzNd9smYjFpywJt8HLpLuxMXDoXiCQXFi82Onay4wdC/y866tXRfREw8poEUZg==",
                            PhoneNumberConfirmed = false,
                            PositionId = 1,
                            RoleId = 3,
                            SecurityStamp = "97704b3d-6c68-495f-9b6b-3ef1b0f176f6",
                            TwoFactorEnabled = false,
                            UserName = "rodger@rodger.com"
                        },
                        new
                        {
                            Id = "0251cc8d-baaa-4aa6-ba92-1c95d6377770",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "66aa342f-7986-493c-b1a8-c13930e29e8c",
                            Email = "will@will.com",
                            EmailConfirmed = true,
                            FirstName = "Will",
                            LastName = "Captains",
                            LockoutEnabled = false,
                            NormalizedEmail = "WILL@WILL.COM",
                            NormalizedUserName = "WILL@WILL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEAzkmB0bHPdifp5wLU83M9zCzwjmaKBb5PRqUfDBKKxoZ1J83t3dFg5jK8BB+ewF3g==",
                            PhoneNumberConfirmed = false,
                            PositionId = 2,
                            RoleId = 2,
                            SecurityStamp = "ee7ac600-2647-445e-a296-7d8760baa085",
                            TeamId = 1,
                            TwoFactorEnabled = false,
                            UserName = "will@will.com"
                        },
                        new
                        {
                            Id = "fe134dea-dd8e-4c07-9201-4472a6409ac7",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ba9aef42-1e76-47bb-9515-e82900cff2aa",
                            Email = "julia@julia.com",
                            EmailConfirmed = true,
                            FirstName = "Julia",
                            LastName = "Players",
                            LockoutEnabled = false,
                            NormalizedEmail = "JULIA@JULIA.COM",
                            NormalizedUserName = "JULIA@JULIA.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEIECs/xxltFYOToFhHAgnDMy8tZCmhVgot8EC+tM1IfjcK4BT2lFO+sfVeT6ZfxbCg==",
                            PhoneNumberConfirmed = false,
                            PositionId = 5,
                            RoleId = 1,
                            SecurityStamp = "b84beed6-2563-41ec-96a4-49008c939e49",
                            TwoFactorEnabled = false,
                            UserName = "julia@julia.com"
                        },
                        new
                        {
                            Id = "462ced06-6c69-45ab-ae3d-36c31bc6ab86",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4e7908cf-6fd2-4bda-90bb-88d69efa1ab7",
                            Email = "lionel@lionel.com",
                            EmailConfirmed = true,
                            FirstName = "Lionel",
                            LastName = "Messi",
                            LockoutEnabled = false,
                            NormalizedEmail = "LIONEL@LIONEL.COM",
                            NormalizedUserName = "LIONEL@LIONEL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEHN6Yi9WIZrzw49mI5C4SbXafCVCY84yXKT2YLp2K9rVPaSkyspA0aeVS9xkZCcIyA==",
                            PhoneNumberConfirmed = false,
                            PositionId = 5,
                            RoleId = 1,
                            SecurityStamp = "9e89fe99-c83b-4910-bce1-d4cb7c445efe",
                            TwoFactorEnabled = false,
                            UserName = "lionel@lionel.com"
                        },
                        new
                        {
                            Id = "1d743f4e-fbf6-427b-8382-d545e070c959",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4816e40a-7930-4380-9dd5-c7ef39abeea8",
                            Email = "cristiano@cristiano.com",
                            EmailConfirmed = true,
                            FirstName = "Cristiano",
                            LastName = "Ronaldo",
                            LockoutEnabled = false,
                            NormalizedEmail = "CRISTIANO@CRISTIANO.COM",
                            NormalizedUserName = "CRISTIANO@CRISTIANO.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAENRUVVKXA5Ya3KL9RreVcKXHAKAEs0FbfRqawmwzLtP5i2Q7AYLGDnuJyQMeM3Skhg==",
                            PhoneNumberConfirmed = false,
                            PositionId = 4,
                            RoleId = 1,
                            SecurityStamp = "76f54498-4632-4f63-81db-e953dd3809b1",
                            TwoFactorEnabled = false,
                            UserName = "cristiano@cristiano.com"
                        },
                        new
                        {
                            Id = "d86ee9dd-418e-4f2e-9e37-8df4b14f19ee",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "68fff582-0c1b-46e7-8d43-22e0e188f98b",
                            Email = "sergio@sergio.com",
                            EmailConfirmed = true,
                            FirstName = "Sergio",
                            LastName = "Ramos",
                            LockoutEnabled = false,
                            NormalizedEmail = "SERGIO@SERGIO.COM",
                            NormalizedUserName = "SERGIO@SERGIO.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEMh1I4MP8lhTr4ZYn6MyoschqnmxiCB0BvZiic0Byi11hGwMPfpgHwVqBKOOtsFIiA==",
                            PhoneNumberConfirmed = false,
                            PositionId = 3,
                            RoleId = 1,
                            SecurityStamp = "dc627198-d9a3-4de0-adf7-f14a465cb082",
                            TwoFactorEnabled = false,
                            UserName = "sergio@sergio.com"
                        },
                        new
                        {
                            Id = "e189db7b-2e13-453a-a5ea-b12d55f1054f",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "64864092-35db-445b-9a68-d812a3d62275",
                            Email = "thomas@thomas.com",
                            EmailConfirmed = true,
                            FirstName = "Thomas",
                            LastName = "Muller",
                            LockoutEnabled = false,
                            NormalizedEmail = "THOMAS@THOMAS.COM",
                            NormalizedUserName = "THOMAS@THOMAS.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEJtH79JSpiZB4m898uiFBRDQ8M+5O8PsPzA15QIt9wPPFUUYRxLGs0w29thDKNt+Pw==",
                            PhoneNumberConfirmed = false,
                            PositionId = 4,
                            RoleId = 1,
                            SecurityStamp = "0c2c2b09-6cd0-45f2-b9dd-ee82fb652ff3",
                            TwoFactorEnabled = false,
                            UserName = "thomas@thomas.com"
                        },
                        new
                        {
                            Id = "5af0f2e1-71f3-484d-a517-aeba23c97473",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f7727abd-680d-46a0-8c6c-2aa075f0cae9",
                            Email = "bastion@bastion.com",
                            EmailConfirmed = true,
                            FirstName = "Bastion",
                            LastName = "Schweinsteiger",
                            LockoutEnabled = false,
                            NormalizedEmail = "BASTION@BASTION.COM",
                            NormalizedUserName = "BASTION@BASTION.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEOoxqi7Ox7L1Ol4+t71K/d439TnkdKsVMLYvBdHTdTnmfRIRxrlvnfGmUhF9PL6ybw==",
                            PhoneNumberConfirmed = false,
                            PositionId = 4,
                            RoleId = 1,
                            SecurityStamp = "828419d6-4e70-4d81-9335-a57372a238e8",
                            TwoFactorEnabled = false,
                            UserName = "bastion@bastion.com"
                        },
                        new
                        {
                            Id = "80e593ff-b140-40cb-9947-916ff58a9e4f",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d2ea1d7d-287e-4a9d-a524-6af7320ea476",
                            Email = "billy@billy.com",
                            EmailConfirmed = true,
                            FirstName = "Billy",
                            LastName = "Captains",
                            LockoutEnabled = false,
                            NormalizedEmail = "BILLY@BILLY.COM",
                            NormalizedUserName = "BILLY@BILLY.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAENrysqC6HVwv3buGvj7QAhD44NStes94i4YcDMOaQMydoX4U0H/+zOqbdNEVunBRdQ==",
                            PhoneNumberConfirmed = false,
                            PositionId = 2,
                            RoleId = 2,
                            SecurityStamp = "e892b0ca-5fb5-4f4d-bef4-ff5603440125",
                            TeamId = 2,
                            TwoFactorEnabled = false,
                            UserName = "billy@billy.com"
                        },
                        new
                        {
                            Id = "0a2fa575-0739-4ee6-a797-83370a17b615",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "caf2acbc-ad46-456f-b125-513edfaa3f6d",
                            Email = "jack@jack.com",
                            EmailConfirmed = true,
                            FirstName = "Jack",
                            LastName = "Sparrow",
                            LockoutEnabled = false,
                            NormalizedEmail = "JACK@JACK.COM",
                            NormalizedUserName = "JACK@JACK.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAECBEeEcR9R+4iiI609xyhi0Lk4Wb7ek7Ou4wG38A5IDpU0NNyIkhNql4DYr0+oJTJg==",
                            PhoneNumberConfirmed = false,
                            PositionId = 5,
                            RoleId = 2,
                            SecurityStamp = "1b8ee3d2-bdf5-4d4a-8815-543ec6db9ab4",
                            TeamId = 3,
                            TwoFactorEnabled = false,
                            UserName = "jack@jack.com"
                        },
                        new
                        {
                            Id = "ffe39243-ed2a-4531-a1d4-7d87adcd9461",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0314a599-5773-4cff-b4be-645c2740b067",
                            Email = "steve@steve.com",
                            EmailConfirmed = true,
                            FirstName = "Steve",
                            LastName = "Rodgers",
                            LockoutEnabled = false,
                            NormalizedEmail = "STEVE@STEVE.COM",
                            NormalizedUserName = "STEVE@STEVE.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEEKJ/LB+CSKgDL1Bg+jykwv0FfKY3TFziEtXpQNFqOdbDuT5pOKvyB0K/RXELgEpsQ==",
                            PhoneNumberConfirmed = false,
                            PositionId = 4,
                            RoleId = 2,
                            SecurityStamp = "76afa8cc-dcdf-484d-8f9a-353ac38e1b44",
                            TeamId = 4,
                            TwoFactorEnabled = false,
                            UserName = "steve@steve.com"
                        },
                        new
                        {
                            Id = "de01d5f4-de08-4b1d-bd03-0f0b3ead376b",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "91924fca-5003-4d3c-bbec-51f5d4ad7a8b",
                            Email = "carol@carol.com",
                            EmailConfirmed = true,
                            FirstName = "Carol",
                            LastName = "Danvers",
                            LockoutEnabled = false,
                            NormalizedEmail = "CAROL@CAROL.COM",
                            NormalizedUserName = "CAROL@CAROL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEJJAoAZv4Mj/X7+qDEHepzJmX2lxA8CWBwYKnM8fWk/v0CL6w67cDqknpwrxrjUE6g==",
                            PhoneNumberConfirmed = false,
                            PositionId = 5,
                            RoleId = 2,
                            SecurityStamp = "222ea9dc-6354-4cb7-a5ce-73de726b1740",
                            TeamId = 5,
                            TwoFactorEnabled = false,
                            UserName = "carol@carol.com"
                        },
                        new
                        {
                            Id = "ec515133-6e28-438f-a93c-d8d3bd897b34",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "32669fa1-91f0-4bd0-827d-ca1f0b01f524",
                            Email = "john@john.com",
                            EmailConfirmed = true,
                            FirstName = "John",
                            LastName = "Miller",
                            LockoutEnabled = false,
                            NormalizedEmail = "JOHN@JOHN.COM",
                            NormalizedUserName = "JOHN@JOHN.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAENAivw+W3u/gftro/h56wd4l85zqCPI1iu7g3dMHPC0xetOqGiD8QJdvy72nNVND8A==",
                            PhoneNumberConfirmed = false,
                            PositionId = 3,
                            RoleId = 2,
                            SecurityStamp = "058fb48c-a80c-4904-b3e2-493a431ba305",
                            TeamId = 6,
                            TwoFactorEnabled = false,
                            UserName = "john@john.com"
                        },
                        new
                        {
                            Id = "643f61f2-e472-4286-85a1-d0745e3acd3d",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "13d41d76-2af0-4e70-96cb-b626e2e4157e",
                            Email = "james@james.com",
                            EmailConfirmed = true,
                            FirstName = "James",
                            LastName = "Kirk",
                            LockoutEnabled = false,
                            NormalizedEmail = "JAMES@JAMES.COM",
                            NormalizedUserName = "JAMES@JAMES.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAELZUrs+Zr2VCv0nU/oGc82NVZaIoZ1kz/UmyaKm/DFTzJ9SzGCQCREIfk6G6WXxX9Q==",
                            PhoneNumberConfirmed = false,
                            PositionId = 3,
                            RoleId = 2,
                            SecurityStamp = "e5d6144b-400e-4470-85c6-0469374bd66c",
                            TeamId = 7,
                            TwoFactorEnabled = false,
                            UserName = "james@james.com"
                        },
                        new
                        {
                            Id = "e8a990f7-f7eb-402b-a751-032f589f151b",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3b290183-4edb-4d35-a107-738e622954d5",
                            Email = "marko@marko.com",
                            EmailConfirmed = true,
                            FirstName = "Marko",
                            LastName = "Ramius",
                            LockoutEnabled = false,
                            NormalizedEmail = "MARKO@MARKO.COM",
                            NormalizedUserName = "MARKO@MARKO.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEKEHts1jAgH1T2TsB1SNJdNfuzooakUbKDXIQMDk+v3rUhpNkd4yGDfGUNEwoQfxYw==",
                            PhoneNumberConfirmed = false,
                            PositionId = 2,
                            RoleId = 2,
                            SecurityStamp = "cd4e9cc6-c391-4205-9637-9767861e7327",
                            TeamId = 8,
                            TwoFactorEnabled = false,
                            UserName = "marko@marko.com"
                        },
                        new
                        {
                            Id = "75fb5fe3-0eef-4642-b893-fca05d421344",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "fa084057-1462-4369-87aa-a1af51e8850d",
                            Email = "terry@teryy.com",
                            EmailConfirmed = true,
                            FirstName = "Terry",
                            LastName = "Captains",
                            LockoutEnabled = false,
                            NormalizedEmail = "TERRY@TERRY.COM",
                            NormalizedUserName = "TERRY@TERYY.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEI4/MzAKJYY/TfTPEL8VAJdR924VJnhCh+qenhoCwaLHFNLe2LAQ5bDfGK05Eautog==",
                            PhoneNumberConfirmed = false,
                            PositionId = 1,
                            RoleId = 2,
                            SecurityStamp = "264073a7-13c6-4334-88b8-6ca2578f13e7",
                            TeamId = 9,
                            TwoFactorEnabled = false,
                            UserName = "terry@terry.com"
                        },
                        new
                        {
                            Id = "32a6205f-51d6-4d5e-b34d-5b3d8aea546f",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9ff6ec08-209b-4a47-9461-e56fe7f6dd3a",
                            Email = "juan@juan.com",
                            EmailConfirmed = true,
                            FirstName = "Juan",
                            LastName = "Captains",
                            LockoutEnabled = false,
                            NormalizedEmail = "JUAN@JUAN.COM",
                            NormalizedUserName = "JUAN@JUAN.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEASdfmL/03uL105qlZdmknXENGNLGcZlvzyBZckUb+iQfiKiEHU7WKrVJruWOI7R2Q==",
                            PhoneNumberConfirmed = false,
                            PositionId = 1,
                            RoleId = 2,
                            SecurityStamp = "030454b8-95c4-4086-884d-de1da2a457c0",
                            TeamId = 10,
                            TwoFactorEnabled = false,
                            UserName = "juan@juan.com"
                        });
                });

            modelBuilder.Entity("LeagueDash.Models.Game", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("GameTime")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("Location")
                        .IsRequired();

                    b.Property<int>("TeamAId");

                    b.Property<int?>("TeamAScore");

                    b.Property<int>("TeamBId");

                    b.Property<int?>("TeamBScore");

                    b.HasKey("Id");

                    b.ToTable("Game");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            GameTime = new DateTime(2019, 5, 21, 19, 15, 0, 0, DateTimeKind.Unspecified),
                            Location = "Elmington Park",
                            TeamAId = 1,
                            TeamAScore = 4,
                            TeamBId = 2,
                            TeamBScore = 3
                        },
                        new
                        {
                            Id = 2,
                            GameTime = new DateTime(2019, 5, 26, 19, 15, 0, 0, DateTimeKind.Unspecified),
                            Location = "West Park",
                            TeamAId = 1,
                            TeamAScore = 2,
                            TeamBId = 3,
                            TeamBScore = 0
                        },
                        new
                        {
                            Id = 3,
                            GameTime = new DateTime(2019, 5, 28, 19, 15, 0, 0, DateTimeKind.Unspecified),
                            Location = "Elmington Park",
                            TeamAId = 1,
                            TeamAScore = 5,
                            TeamBId = 4,
                            TeamBScore = 3
                        },
                        new
                        {
                            Id = 4,
                            GameTime = new DateTime(2019, 5, 30, 19, 15, 0, 0, DateTimeKind.Unspecified),
                            Location = "West Park",
                            TeamAId = 1,
                            TeamAScore = 2,
                            TeamBId = 5,
                            TeamBScore = 1
                        },
                        new
                        {
                            Id = 5,
                            GameTime = new DateTime(2019, 6, 4, 19, 15, 0, 0, DateTimeKind.Unspecified),
                            Location = "Elmington Park",
                            TeamAId = 1,
                            TeamAScore = 4,
                            TeamBId = 6,
                            TeamBScore = 1
                        },
                        new
                        {
                            Id = 6,
                            GameTime = new DateTime(2019, 6, 6, 19, 15, 0, 0, DateTimeKind.Unspecified),
                            Location = "West Park",
                            TeamAId = 1,
                            TeamAScore = 5,
                            TeamBId = 7,
                            TeamBScore = 4
                        },
                        new
                        {
                            Id = 7,
                            GameTime = new DateTime(2019, 5, 21, 19, 30, 0, 0, DateTimeKind.Unspecified),
                            Location = "Elmington Park",
                            TeamAId = 2,
                            TeamAScore = 4,
                            TeamBId = 3,
                            TeamBScore = 3
                        },
                        new
                        {
                            Id = 8,
                            GameTime = new DateTime(2019, 5, 26, 19, 30, 0, 0, DateTimeKind.Unspecified),
                            Location = "West Park",
                            TeamAId = 2,
                            TeamAScore = 1,
                            TeamBId = 4,
                            TeamBScore = 2
                        },
                        new
                        {
                            Id = 9,
                            GameTime = new DateTime(2019, 5, 28, 19, 30, 0, 0, DateTimeKind.Unspecified),
                            Location = "Elmington Park",
                            TeamAId = 2,
                            TeamAScore = 4,
                            TeamBId = 5,
                            TeamBScore = 3
                        },
                        new
                        {
                            Id = 10,
                            GameTime = new DateTime(2019, 5, 30, 19, 30, 0, 0, DateTimeKind.Unspecified),
                            Location = "West Park",
                            TeamAId = 2,
                            TeamAScore = 2,
                            TeamBId = 6,
                            TeamBScore = 1
                        },
                        new
                        {
                            Id = 11,
                            GameTime = new DateTime(2019, 6, 4, 19, 30, 0, 0, DateTimeKind.Unspecified),
                            Location = "Elmington Park",
                            TeamAId = 2,
                            TeamAScore = 4,
                            TeamBId = 7,
                            TeamBScore = 1
                        },
                        new
                        {
                            Id = 12,
                            GameTime = new DateTime(2019, 6, 6, 19, 30, 0, 0, DateTimeKind.Unspecified),
                            Location = "West Park",
                            TeamAId = 2,
                            TeamAScore = 5,
                            TeamBId = 8,
                            TeamBScore = 4
                        },
                        new
                        {
                            Id = 13,
                            GameTime = new DateTime(2019, 5, 21, 19, 45, 0, 0, DateTimeKind.Unspecified),
                            Location = "Elmington Park",
                            TeamAId = 3,
                            TeamAScore = 0,
                            TeamBId = 4,
                            TeamBScore = 2
                        },
                        new
                        {
                            Id = 14,
                            GameTime = new DateTime(2019, 5, 26, 19, 45, 0, 0, DateTimeKind.Unspecified),
                            Location = "West Park",
                            TeamAId = 3,
                            TeamAScore = 1,
                            TeamBId = 5,
                            TeamBScore = 2
                        },
                        new
                        {
                            Id = 15,
                            GameTime = new DateTime(2019, 5, 28, 19, 45, 0, 0, DateTimeKind.Unspecified),
                            Location = "Elmington Park",
                            TeamAId = 3,
                            TeamAScore = 4,
                            TeamBId = 6,
                            TeamBScore = 2
                        },
                        new
                        {
                            Id = 16,
                            GameTime = new DateTime(2019, 5, 30, 19, 45, 0, 0, DateTimeKind.Unspecified),
                            Location = "West Park",
                            TeamAId = 3,
                            TeamAScore = 2,
                            TeamBId = 7,
                            TeamBScore = 1
                        },
                        new
                        {
                            Id = 17,
                            GameTime = new DateTime(2019, 6, 4, 19, 45, 0, 0, DateTimeKind.Unspecified),
                            Location = "Elmington Park",
                            TeamAId = 3,
                            TeamAScore = 4,
                            TeamBId = 8,
                            TeamBScore = 1
                        },
                        new
                        {
                            Id = 18,
                            GameTime = new DateTime(2019, 6, 6, 19, 45, 0, 0, DateTimeKind.Unspecified),
                            Location = "West Park",
                            TeamAId = 3,
                            TeamAScore = 5,
                            TeamBId = 9,
                            TeamBScore = 2
                        },
                        new
                        {
                            Id = 19,
                            GameTime = new DateTime(2019, 5, 21, 19, 15, 0, 0, DateTimeKind.Unspecified),
                            Location = "Elmington Park",
                            TeamAId = 4,
                            TeamAScore = 7,
                            TeamBId = 5,
                            TeamBScore = 2
                        },
                        new
                        {
                            Id = 20,
                            GameTime = new DateTime(2019, 5, 26, 19, 15, 0, 0, DateTimeKind.Unspecified),
                            Location = "West Park",
                            TeamAId = 4,
                            TeamAScore = 5,
                            TeamBId = 6,
                            TeamBScore = 6
                        },
                        new
                        {
                            Id = 21,
                            GameTime = new DateTime(2019, 5, 28, 19, 15, 0, 0, DateTimeKind.Unspecified),
                            Location = "Elmington Park",
                            TeamAId = 4,
                            TeamAScore = 4,
                            TeamBId = 7,
                            TeamBScore = 4
                        },
                        new
                        {
                            Id = 22,
                            GameTime = new DateTime(2019, 5, 30, 19, 15, 0, 0, DateTimeKind.Unspecified),
                            Location = "West Park",
                            TeamAId = 4,
                            TeamAScore = 1,
                            TeamBId = 8,
                            TeamBScore = 2
                        },
                        new
                        {
                            Id = 23,
                            GameTime = new DateTime(2019, 6, 4, 19, 15, 0, 0, DateTimeKind.Unspecified),
                            Location = "Elmington Park",
                            TeamAId = 4,
                            TeamAScore = 2,
                            TeamBId = 9,
                            TeamBScore = 1
                        },
                        new
                        {
                            Id = 24,
                            GameTime = new DateTime(2019, 6, 6, 19, 15, 0, 0, DateTimeKind.Unspecified),
                            Location = "West Park",
                            TeamAId = 4,
                            TeamAScore = 4,
                            TeamBId = 10,
                            TeamBScore = 2
                        },
                        new
                        {
                            Id = 25,
                            GameTime = new DateTime(2019, 5, 21, 19, 30, 0, 0, DateTimeKind.Unspecified),
                            Location = "Elmington Park",
                            TeamAId = 5,
                            TeamAScore = 3,
                            TeamBId = 6,
                            TeamBScore = 2
                        },
                        new
                        {
                            Id = 26,
                            GameTime = new DateTime(2019, 5, 26, 19, 30, 0, 0, DateTimeKind.Unspecified),
                            Location = "West Park",
                            TeamAId = 5,
                            TeamAScore = 5,
                            TeamBId = 7,
                            TeamBScore = 2
                        },
                        new
                        {
                            Id = 27,
                            GameTime = new DateTime(2019, 5, 28, 19, 30, 0, 0, DateTimeKind.Unspecified),
                            Location = "Elmington Park",
                            TeamAId = 5,
                            TeamAScore = 2,
                            TeamBId = 8,
                            TeamBScore = 5
                        },
                        new
                        {
                            Id = 28,
                            GameTime = new DateTime(2019, 5, 30, 19, 30, 0, 0, DateTimeKind.Unspecified),
                            Location = "West Park",
                            TeamAId = 5,
                            TeamAScore = 2,
                            TeamBId = 9,
                            TeamBScore = 2
                        },
                        new
                        {
                            Id = 29,
                            GameTime = new DateTime(2019, 6, 4, 19, 30, 0, 0, DateTimeKind.Unspecified),
                            Location = "Elmington Park",
                            TeamAId = 5,
                            TeamAScore = 3,
                            TeamBId = 10,
                            TeamBScore = 2
                        },
                        new
                        {
                            Id = 30,
                            GameTime = new DateTime(2019, 6, 6, 19, 30, 0, 0, DateTimeKind.Unspecified),
                            Location = "West Park",
                            TeamAId = 5,
                            TeamAScore = 2,
                            TeamBId = 1,
                            TeamBScore = 3
                        });
                });

            modelBuilder.Entity("LeagueDash.Models.Position", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Position");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "No Preference"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Goalkeeper"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Defender"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Midfielder"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Forward"
                        });
                });

            modelBuilder.Entity("LeagueDash.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Role");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Player"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Captain"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Commissioner"
                        });
                });

            modelBuilder.Entity("LeagueDash.Models.Team", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CaptainId")
                        .IsRequired();

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Team");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CaptainId = "0251cc8d-baaa-4aa6-ba92-1c95d6377770",
                            DateCreated = new DateTime(2019, 5, 14, 14, 52, 40, 949, DateTimeKind.Local).AddTicks(6582),
                            Name = "Nashville SC"
                        },
                        new
                        {
                            Id = 2,
                            CaptainId = "80e593ff-b140-40cb-9947-916ff58a9e4f",
                            DateCreated = new DateTime(2019, 5, 14, 14, 52, 40, 953, DateTimeKind.Local).AddTicks(1953),
                            Name = "Junior Wombats"
                        },
                        new
                        {
                            Id = 3,
                            CaptainId = "0a2fa575-0739-4ee6-a797-83370a17b615",
                            DateCreated = new DateTime(2019, 5, 14, 14, 52, 40, 953, DateTimeKind.Local).AddTicks(1970),
                            Name = "Salty Pirates"
                        },
                        new
                        {
                            Id = 4,
                            CaptainId = "ffe39243-ed2a-4531-a1d4-7d87adcd9461",
                            DateCreated = new DateTime(2019, 5, 14, 14, 52, 40, 953, DateTimeKind.Local).AddTicks(1974),
                            Name = "Earth's Mightiest Heroes"
                        },
                        new
                        {
                            Id = 5,
                            CaptainId = "de01d5f4-de08-4b1d-bd03-0f0b3ead376b",
                            DateCreated = new DateTime(2019, 5, 14, 14, 52, 40, 953, DateTimeKind.Local).AddTicks(1977),
                            Name = "The New Avengers"
                        },
                        new
                        {
                            Id = 6,
                            CaptainId = "ec515133-6e28-438f-a93c-d8d3bd897b34",
                            DateCreated = new DateTime(2019, 5, 14, 14, 52, 40, 953, DateTimeKind.Local).AddTicks(1981),
                            Name = "101st Airborne"
                        },
                        new
                        {
                            Id = 7,
                            CaptainId = "643f61f2-e472-4286-85a1-d0745e3acd3d",
                            DateCreated = new DateTime(2019, 5, 14, 14, 52, 40, 953, DateTimeKind.Local).AddTicks(1984),
                            Name = "Space Invaders"
                        },
                        new
                        {
                            Id = 8,
                            CaptainId = "e8a990f7-f7eb-402b-a751-032f589f151b",
                            DateCreated = new DateTime(2019, 5, 14, 14, 52, 40, 953, DateTimeKind.Local).AddTicks(1988),
                            Name = "Red October"
                        },
                        new
                        {
                            Id = 9,
                            CaptainId = "75fb5fe3-0eef-4642-b893-fca05d421344",
                            DateCreated = new DateTime(2019, 5, 14, 14, 52, 40, 953, DateTimeKind.Local).AddTicks(1995),
                            Name = "Tornadoes"
                        },
                        new
                        {
                            Id = 10,
                            CaptainId = "32a6205f-51d6-4d5e-b34d-5b3d8aea546f",
                            DateCreated = new DateTime(2019, 5, 14, 14, 52, 40, 953, DateTimeKind.Local).AddTicks(1998),
                            Name = "Predators"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasMaxLength(128);

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("LeagueDash.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("LeagueDash.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("LeagueDash.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("LeagueDash.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
