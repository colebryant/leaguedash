// <auto-generated />
using System;
using LeagueDash.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace LeagueDash.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.2-servicing-10034")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("LeagueDash.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("FirstName")
                        .IsRequired();

                    b.Property<string>("LastName")
                        .IsRequired();

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<int>("PositionId");

                    b.Property<int>("RoleId");

                    b.Property<string>("SecurityStamp");

                    b.Property<int?>("TeamId");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = "5061754a-5d88-4e46-a8ac-62f4434af4ed",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d8001a2b-982f-43d3-988b-c8f513b4ede3",
                            Email = "rodger@rodger.com",
                            EmailConfirmed = true,
                            FirstName = "Rodger",
                            LastName = "Commish",
                            LockoutEnabled = false,
                            NormalizedEmail = "RODGER@RODGER.COM",
                            NormalizedUserName = "RODGER@RODGER.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEMojExUgT82Sawpwveu6LLFuEpNJxX4iUBu77tG5nPuyvouw3wm+xvL1EDy5K0iJWA==",
                            PhoneNumberConfirmed = false,
                            PositionId = 1,
                            RoleId = 3,
                            SecurityStamp = "b8eef87f-e160-425f-9d50-73170ecd9bcc",
                            TwoFactorEnabled = false,
                            UserName = "rodger@rodger.com"
                        },
                        new
                        {
                            Id = "53f1ba03-0ee6-48ca-89ff-eee142296415",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9fd5d7d0-16db-4751-a308-114efa4ed5e0",
                            Email = "will@will.com",
                            EmailConfirmed = true,
                            FirstName = "Will",
                            LastName = "Captains",
                            LockoutEnabled = false,
                            NormalizedEmail = "WILL@WILL.COM",
                            NormalizedUserName = "WILL@WILL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEIOjZUleFWFkDhpDJ4InlDpcOFZDK7GgIa58DR5HguI5QuZWfMpWrQ0pqPDD4cyp3Q==",
                            PhoneNumberConfirmed = false,
                            PositionId = 2,
                            RoleId = 2,
                            SecurityStamp = "4461f143-d609-4254-8947-4997cdd4d419",
                            TeamId = 1,
                            TwoFactorEnabled = false,
                            UserName = "will@will.com"
                        },
                        new
                        {
                            Id = "44b7cbc1-f848-41bb-a6de-ab19bd985895",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "12079da0-69fd-41b5-916e-30d13a46bd85",
                            Email = "julia@julia.com",
                            EmailConfirmed = true,
                            FirstName = "Julia",
                            LastName = "Players",
                            LockoutEnabled = false,
                            NormalizedEmail = "JULIA@JULIA.COM",
                            NormalizedUserName = "JULIA@JULIA.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEB76m4J60GnsTa+gUUXfUlT5bR1rn51DBYgnd5TYtdLSpq1zvHLoPZYOLnm0AiqL2A==",
                            PhoneNumberConfirmed = false,
                            PositionId = 5,
                            RoleId = 1,
                            SecurityStamp = "debca76a-21c1-453a-a683-728cb6eb945d",
                            TwoFactorEnabled = false,
                            UserName = "julia@julia.com"
                        },
                        new
                        {
                            Id = "39523271-c006-46a0-bc53-e531322d0500",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3c92e065-6460-4d38-b2ac-4ea0266c7c4e",
                            Email = "lionel@lionel.com",
                            EmailConfirmed = true,
                            FirstName = "Lionel",
                            LastName = "Messi",
                            LockoutEnabled = false,
                            NormalizedEmail = "LIONEL@LIONEL.COM",
                            NormalizedUserName = "LIONEL@LIONEL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAENp38dt4KLPKzc/bmVLg1wkvxFHANN1vdgZTyZF07coIcZGNGk3wAUBK4/omWoYazw==",
                            PhoneNumberConfirmed = false,
                            PositionId = 5,
                            RoleId = 1,
                            SecurityStamp = "5c076caf-ec3e-4b44-af12-572827b34eab",
                            TwoFactorEnabled = false,
                            UserName = "lionel@lionel.com"
                        },
                        new
                        {
                            Id = "2fa67c53-605b-4889-a3af-b1d00c5070ec",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1d95a438-83bb-4424-b6e3-2b54833ad9ce",
                            Email = "cristiano@cristiano.com",
                            EmailConfirmed = true,
                            FirstName = "Cristiano",
                            LastName = "Ronaldo",
                            LockoutEnabled = false,
                            NormalizedEmail = "CRISTIANO@CRISTIANO.COM",
                            NormalizedUserName = "CRISTIANO@CRISTIANO.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEKDDzBBmniOgQ4BPwfZieoqdInI+cNriC0frN2PEipCULH9ienCPQgbQvm/KNEzlxg==",
                            PhoneNumberConfirmed = false,
                            PositionId = 4,
                            RoleId = 1,
                            SecurityStamp = "4722bff1-3527-4990-b3b4-d7918db46b30",
                            TwoFactorEnabled = false,
                            UserName = "cristiano@cristiano.com"
                        },
                        new
                        {
                            Id = "98a0d6f6-17d6-44ed-8c00-5bc71cd8bcb0",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "bbfcf0ee-1f42-4527-9529-946c3fec336b",
                            Email = "sergio@sergio.com",
                            EmailConfirmed = true,
                            FirstName = "Sergio",
                            LastName = "Ramos",
                            LockoutEnabled = false,
                            NormalizedEmail = "SERGIO@SERGIO.COM",
                            NormalizedUserName = "SERGIO@SERGIO.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEBaQ0aTOXrEUAgyVTwHkqZQcvvMpRQkOsLRv9Wk3e7oUS8qW5SPRZlngb/LbWhUWqQ==",
                            PhoneNumberConfirmed = false,
                            PositionId = 3,
                            RoleId = 1,
                            SecurityStamp = "df49187a-d6d2-4d44-9698-cf042a3913df",
                            TwoFactorEnabled = false,
                            UserName = "sergio@sergio.com"
                        },
                        new
                        {
                            Id = "c9b5a564-eb31-49b5-8e91-7f2adbf56d80",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "35bd07ed-195e-4176-b6a8-79024b687673",
                            Email = "thomas@thomas.com",
                            EmailConfirmed = true,
                            FirstName = "Thomas",
                            LastName = "Muller",
                            LockoutEnabled = false,
                            NormalizedEmail = "THOMAS@THOMAS.COM",
                            NormalizedUserName = "THOMAS@THOMAS.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEJy0EBIcXjHBQQ2KSYS1Aejg/RCaTSwXXL/gvZSnjAxtNsQDzJrzKcQ8LP2gIcz73A==",
                            PhoneNumberConfirmed = false,
                            PositionId = 4,
                            RoleId = 1,
                            SecurityStamp = "ee022a3a-82f3-4598-ba52-59ffbd31da91",
                            TwoFactorEnabled = false,
                            UserName = "thomas@thomas.com"
                        },
                        new
                        {
                            Id = "82b1ff03-eb79-4527-9811-b7993160af3e",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d5fefc13-d51d-4d65-928b-06adfa03ef0d",
                            Email = "bastion@bastion.com",
                            EmailConfirmed = true,
                            FirstName = "Bastion",
                            LastName = "Schweinsteiger",
                            LockoutEnabled = false,
                            NormalizedEmail = "BASTION@BASTION.COM",
                            NormalizedUserName = "BASTION@BASTION.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEA/tgqsUHKnY4Mrdy5UewugtEObJ96osbnGUci4Jj5UQJpDgdHXaMB6CwOKYTcN1Yg==",
                            PhoneNumberConfirmed = false,
                            PositionId = 4,
                            RoleId = 1,
                            SecurityStamp = "f8c39ead-3f56-4c6b-913d-67db2f524346",
                            TwoFactorEnabled = false,
                            UserName = "bastion@bastion.com"
                        },
                        new
                        {
                            Id = "1d72818d-8976-44ce-93a7-f47f9feea63d",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3be19c49-de9f-4352-a894-347414bff2ba",
                            Email = "billy@billy.com",
                            EmailConfirmed = true,
                            FirstName = "Billy",
                            LastName = "Captains",
                            LockoutEnabled = false,
                            NormalizedEmail = "BILLY@BILLY.COM",
                            NormalizedUserName = "BILLY@BILLY.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEGihmQrhz4CsJ494S38JVO2Fsm3A1WavIi/HO1977Iux0QnR+RGX2yAcf7CYjy5IwQ==",
                            PhoneNumberConfirmed = false,
                            PositionId = 2,
                            RoleId = 2,
                            SecurityStamp = "46e0c5bb-0fc1-481a-b49a-99a35806601a",
                            TeamId = 2,
                            TwoFactorEnabled = false,
                            UserName = "billy@billy.com"
                        },
                        new
                        {
                            Id = "8f266432-cb10-486b-97c8-8fe339426109",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "50f8095f-7cc9-4e14-b5fb-9aecc96b7701",
                            Email = "jack@jack.com",
                            EmailConfirmed = true,
                            FirstName = "Jack",
                            LastName = "Sparrow",
                            LockoutEnabled = false,
                            NormalizedEmail = "JACK@JACK.COM",
                            NormalizedUserName = "JACK@JACK.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEIYYsI7U8SXOT6sg63qjpAYtwLRuI7qXySEclcS9WA/F0yhI4jdgA7V6i3YFdPVCnw==",
                            PhoneNumberConfirmed = false,
                            PositionId = 5,
                            RoleId = 2,
                            SecurityStamp = "f4f2c07f-d0b2-463d-9c7a-574733b17bdc",
                            TeamId = 3,
                            TwoFactorEnabled = false,
                            UserName = "jack@jack.com"
                        },
                        new
                        {
                            Id = "0b8b3a0c-fbd9-491e-a8c4-f400e0e0a121",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "29121ba3-6c02-4620-80a2-c158b35db0d2",
                            Email = "steve@steve.com",
                            EmailConfirmed = true,
                            FirstName = "Steve",
                            LastName = "Rodgers",
                            LockoutEnabled = false,
                            NormalizedEmail = "STEVE@STEVE.COM",
                            NormalizedUserName = "STEVE@STEVE.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEGS18QhxZdiJfagAMzF7CyrvJcd25vZOxkGv63WrS4yaPbPor45NnGxDJO38atsEWA==",
                            PhoneNumberConfirmed = false,
                            PositionId = 4,
                            RoleId = 2,
                            SecurityStamp = "dfac3e70-df55-46e2-b833-cfd1bb54c19d",
                            TeamId = 4,
                            TwoFactorEnabled = false,
                            UserName = "steve@steve.com"
                        },
                        new
                        {
                            Id = "6186e7db-c20e-4184-afda-d7acda1b38c7",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a4e2e87f-85b5-4a0d-a961-94feffe0fb2f",
                            Email = "carol@carol.com",
                            EmailConfirmed = true,
                            FirstName = "Carol",
                            LastName = "Danvers",
                            LockoutEnabled = false,
                            NormalizedEmail = "CAROL@CAROL.COM",
                            NormalizedUserName = "CAROL@CAROL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEN4SQTaFmA8/pSB3xYCC2zMgmeBjGH+X6dUmUNPomkzmJomFHTyed1ngX0snXWwqoA==",
                            PhoneNumberConfirmed = false,
                            PositionId = 5,
                            RoleId = 2,
                            SecurityStamp = "aeda91fb-8f10-4493-996c-84b5fc7325d7",
                            TeamId = 5,
                            TwoFactorEnabled = false,
                            UserName = "carol@carol.com"
                        },
                        new
                        {
                            Id = "62b2147b-c2f2-48de-89e6-6aed4050737f",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b30da9e4-7bb2-4c1d-92b1-d15b677c2ca4",
                            Email = "john@john.com",
                            EmailConfirmed = true,
                            FirstName = "John",
                            LastName = "Miller",
                            LockoutEnabled = false,
                            NormalizedEmail = "JOHN@JOHN.COM",
                            NormalizedUserName = "JOHN@JOHN.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEE69b1hC5Jf8rGo3xdR06opS9yMjE0v6rVHD34DwUkWNB8aBypOFU6nBLuhP7LSCCQ==",
                            PhoneNumberConfirmed = false,
                            PositionId = 3,
                            RoleId = 2,
                            SecurityStamp = "3bf008a8-8561-41cb-b33c-a22d08ebaac9",
                            TeamId = 6,
                            TwoFactorEnabled = false,
                            UserName = "john@john.com"
                        },
                        new
                        {
                            Id = "0b05f2d7-41aa-4ee1-a41c-dac43dfdb87b",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d9a5f173-120e-46d3-ba41-59656aa784c9",
                            Email = "james@james.com",
                            EmailConfirmed = true,
                            FirstName = "James",
                            LastName = "Kirk",
                            LockoutEnabled = false,
                            NormalizedEmail = "JAMES@JAMES.COM",
                            NormalizedUserName = "JAMES@JAMES.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEGpVke1xhMi/PRfUcHQbvaVbNjKh+uzxIn1avVTEVptXk5a0MwNe/C1cqtaos44ydg==",
                            PhoneNumberConfirmed = false,
                            PositionId = 3,
                            RoleId = 2,
                            SecurityStamp = "25f2b386-7147-49eb-862d-fe6c840b0812",
                            TeamId = 7,
                            TwoFactorEnabled = false,
                            UserName = "james@james.com"
                        },
                        new
                        {
                            Id = "114fa0b1-9ac0-443c-b9c2-c8c97d44cf31",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5b4d933c-8d12-4be6-9cff-89f514ed2996",
                            Email = "marko@marko.com",
                            EmailConfirmed = true,
                            FirstName = "Marko",
                            LastName = "Ramius",
                            LockoutEnabled = false,
                            NormalizedEmail = "MARKO@MARKO.COM",
                            NormalizedUserName = "MARKO@MARKO.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEAT0cWz1nOKfTkvZDoUuhHjyOfq1XneIE5o3AOYZCaSdxlAuFwG8fWb95ntjakmXPQ==",
                            PhoneNumberConfirmed = false,
                            PositionId = 2,
                            RoleId = 2,
                            SecurityStamp = "5b2ff256-bef7-4bd5-9365-bb3055158958",
                            TeamId = 8,
                            TwoFactorEnabled = false,
                            UserName = "marko@marko.com"
                        },
                        new
                        {
                            Id = "0a045a11-593d-421c-b073-415a6b0a7ab0",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "985c4af2-84d9-4e89-a5bd-e086367f6bde",
                            Email = "terry@teryy.com",
                            EmailConfirmed = true,
                            FirstName = "Terry",
                            LastName = "Captains",
                            LockoutEnabled = false,
                            NormalizedEmail = "TERRY@TERRY.COM",
                            NormalizedUserName = "TERRY@TERYY.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEO098INs0gJ1jO7kUKKCIFsOKP/DqX2QXmWYtMeuSbH4Lh0UfNef1GNt+yUeGSvY/w==",
                            PhoneNumberConfirmed = false,
                            PositionId = 1,
                            RoleId = 2,
                            SecurityStamp = "0e5ab7c1-56a9-4502-9420-27aff0d19e81",
                            TeamId = 9,
                            TwoFactorEnabled = false,
                            UserName = "terry@terry.com"
                        },
                        new
                        {
                            Id = "e5a76361-c5f6-4ba1-a097-fd15b1eff8a4",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c4f35365-ce41-48a6-979a-8fa4c9848371",
                            Email = "juan@juan.com",
                            EmailConfirmed = true,
                            FirstName = "Juan",
                            LastName = "Captains",
                            LockoutEnabled = false,
                            NormalizedEmail = "JUAN@JUAN.COM",
                            NormalizedUserName = "JUAN@JUAN.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEHzRUkLjFvbfcTfPDkXInVgFkl8WdNqmbl14YQxO6ZdI7ltG0KmQ5yKnBtVDwXFQXw==",
                            PhoneNumberConfirmed = false,
                            PositionId = 1,
                            RoleId = 2,
                            SecurityStamp = "e5ce20ae-b34c-4437-865e-92fdd39696c1",
                            TeamId = 10,
                            TwoFactorEnabled = false,
                            UserName = "juan@juan.com"
                        });
                });

            modelBuilder.Entity("LeagueDash.Models.Game", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("GameTime")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("Location")
                        .IsRequired();

                    b.Property<int>("TeamAId");

                    b.Property<int?>("TeamAScore");

                    b.Property<int>("TeamBId");

                    b.Property<int?>("TeamBScore");

                    b.HasKey("Id");

                    b.ToTable("Game");
                });

            modelBuilder.Entity("LeagueDash.Models.Position", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Position");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "No Preference"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Goalkeeper"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Defender"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Midfielder"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Forward"
                        });
                });

            modelBuilder.Entity("LeagueDash.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Role");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Player"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Captain"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Commissioner"
                        });
                });

            modelBuilder.Entity("LeagueDash.Models.Team", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CaptainId")
                        .IsRequired();

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Team");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CaptainId = "53f1ba03-0ee6-48ca-89ff-eee142296415",
                            DateCreated = new DateTime(2019, 5, 13, 9, 53, 41, 940, DateTimeKind.Local).AddTicks(4905),
                            Name = "Nashville SC"
                        },
                        new
                        {
                            Id = 2,
                            CaptainId = "1d72818d-8976-44ce-93a7-f47f9feea63d",
                            DateCreated = new DateTime(2019, 5, 13, 9, 53, 41, 942, DateTimeKind.Local).AddTicks(6782),
                            Name = "Junior Wombats"
                        },
                        new
                        {
                            Id = 3,
                            CaptainId = "8f266432-cb10-486b-97c8-8fe339426109",
                            DateCreated = new DateTime(2019, 5, 13, 9, 53, 41, 942, DateTimeKind.Local).AddTicks(6792),
                            Name = "Salty Pirates"
                        },
                        new
                        {
                            Id = 4,
                            CaptainId = "0b8b3a0c-fbd9-491e-a8c4-f400e0e0a121",
                            DateCreated = new DateTime(2019, 5, 13, 9, 53, 41, 942, DateTimeKind.Local).AddTicks(6796),
                            Name = "Earth's Mightiest Heroes"
                        },
                        new
                        {
                            Id = 5,
                            CaptainId = "6186e7db-c20e-4184-afda-d7acda1b38c7",
                            DateCreated = new DateTime(2019, 5, 13, 9, 53, 41, 942, DateTimeKind.Local).AddTicks(6803),
                            Name = "The New Avengers"
                        },
                        new
                        {
                            Id = 6,
                            CaptainId = "62b2147b-c2f2-48de-89e6-6aed4050737f",
                            DateCreated = new DateTime(2019, 5, 13, 9, 53, 41, 942, DateTimeKind.Local).AddTicks(6806),
                            Name = "101st Airborne"
                        },
                        new
                        {
                            Id = 7,
                            CaptainId = "0b05f2d7-41aa-4ee1-a41c-dac43dfdb87b",
                            DateCreated = new DateTime(2019, 5, 13, 9, 53, 41, 942, DateTimeKind.Local).AddTicks(6810),
                            Name = "Space Invaders"
                        },
                        new
                        {
                            Id = 8,
                            CaptainId = "114fa0b1-9ac0-443c-b9c2-c8c97d44cf31",
                            DateCreated = new DateTime(2019, 5, 13, 9, 53, 41, 942, DateTimeKind.Local).AddTicks(6813),
                            Name = "Red October"
                        },
                        new
                        {
                            Id = 9,
                            CaptainId = "0a045a11-593d-421c-b073-415a6b0a7ab0",
                            DateCreated = new DateTime(2019, 5, 13, 9, 53, 41, 942, DateTimeKind.Local).AddTicks(6817),
                            Name = "Tornadoes"
                        },
                        new
                        {
                            Id = 10,
                            CaptainId = "e5a76361-c5f6-4ba1-a097-fd15b1eff8a4",
                            DateCreated = new DateTime(2019, 5, 13, 9, 53, 41, 942, DateTimeKind.Local).AddTicks(6820),
                            Name = "Predators"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasMaxLength(128);

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("LeagueDash.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("LeagueDash.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("LeagueDash.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("LeagueDash.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
